* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

:root {
    font-size: 62.5%;
  
    --hue: 100; /* Utilize o --hue como uma variavel para poder alterar as cores do site de forma mais dinamica */
    --color-base-white: hsl(0, 0%, 100%);
    --color-base-gray-100: hsl(0, 0%, 96%);
    --color-base-gray-300: hsl(var(--hue), 60%, 58%);
    --color-base-gray-500: hsl(0, 0%, 24%);
    --color-base-gray-900: hsl(var(--hue), 60%, 20%);
  }

html, body, input {
    font-family: 'Mulish', sans-serif;
}

body {
    font-size: 1.6rem;
    background-color: var(--color-base-white);
    color: var(--color-base-gray-900);
}

#app {
    display: grid;
    grid-template-rows: max-content 1fr max-content;
    height: 100vh;
}

.container {
    padding: 1.6rem 3.2rem;
    width: min(112rem, 100%); /* -> pega a largura minima entre 112rem e 100% (100% seria 1200 pixels) */
    margin: 0 auto;
}

main {
    overflow-y: scroll; /*-> propriedade para fazer com que somente o main tenha scroll */
    background-color: var(--color-base-gray-100);
}

header, nav, nav ul {
    display: flex;
    align-items: center;
    gap: 7.2rem;
    font-weight: 700;
}

header form {
    flex: 1; /* faz com que o elemento preencha todo o espaço disponível */
}

nav ul {
    list-style: none;
    font-size: 1.8rem;
    color: var(--color-base-gray-300);
}

ul li.active {
    color: var(--color-base-gray-900);
}

.input-wrapper label {
    width: 1px;
    height: 1px;
    overflow: hidden; /* overflow: hidden e position: absolute sao usadas para esconder o label */
    position: absolute;
}

.input-wrapper input {
    width: 100%;
    padding: 1.6rem;
    
    background-color: var(--color-base-gray-100);
    border: 0;
    border-radius: .6rem;

    font-size: 1.6rem;
    font-weight: 600;
}

.input-wrapper input::placeholder {
    opacity: 0.56;
    color: var(--color-base-gray-500);
}

.avatar {
    width: 4.2rem;
    height: 4.2rem;

    object-fit: cover; /* propriedade para não deixar a imagem esticada */

    border-radius: 50%;
}

/* galeria */
main h1 {
    padding-top: 1.6rem;
    font-size: 2.4rem;
}

.gallery {
    margin-top: 3.2rem;

    display: grid;
    grid-template-columns: repeat(3, 1fr); /* utiliza o repeat() para que sejam criadas 3 colunas com itens de tamanho 1fr */
    gap: 2.2rem;
}

.item {
    background-color: var(--color-base-white);
    border-radius: .8rem;
    overflow: hidden; /* Utilize essa propriedade para que a imagem nas transborde para fora da caixa e possa aparecer as bordas */
}

.item img {
    width: 100%;

    aspect-ratio: 16/9; /* propriedade para definir a proporção da imagem */
    object-fit: cover; /* use object-fit para cobrir essa proporção de 16/9 */

    /* propriedade transition serve para suavizar as transições de outras propriedades como a filter e transform */
    transition-property: transform, filter;
    transition-duration: 200ms;
    transition-delay: 0;
    transition-timing-function: ease-in;

    /* shorthand -> transition: all 200ms ease-out;*/

    display: block;
}

.item img:hover {
    filter: hue-rotate(7deg) contrast(101%) saturate(200%); 
    /* filter serve para aplicar filtro em determinados elementos, bom para interação com usuário */
    transform: scale(1.1) rotate(-2deg); 
    /* use o transform para aumentar e rotacionar a imagem quando passar o mouse */
}

.details {
    padding: 2.2rem;
    background-color: var(--color-base-white);
    z-index: 1;
    position: relative;
}

.details h2 {
    font-size: 1.8rem;
}

.tags {
    margin-top: 1.2rem;
}

.tags span {
    padding: .6rem;
    background-color: var(--color-base-gray-100);
    border-radius: .4rem;

    line-height: 0;
    font-size: 1.2rem;
    text-transform: uppercase;
}

footer p {
    text-align: center;
    padding: 1.6rem;
    font-weight: 600;
}

header {
    --startY: -100%; /* -> Define a variavel de inicio como -100% para animação começar de cima para baixo */
    animation: move .2s;
}

footer {
    --startY: 100%; /* -> Define a variavel de inicio como 100% para animação começar de baixo para cima */
    animation: move .2s;
}


/* criação do @keyframes de movimento do header e footer da animação */
@keyframes move {
    from {
        transform: translateY(var(--startY)); /* -> Define a position inicial como sendo a variavel --startY */
    }
}

.item {
    --delay: .4s; /* -> criação da var --delay para definir um delay para o surgimento dos itens no main*/
    animation: appear 4s var(--delay) backwards;

    /* IMPORTANTE: Para dar o efeito de cada item aparecer em sequencia, necessario definir no HTML o valor da var --delay de cada item */
}

/* criação do @keyframes para aparecer os itens do main */
@keyframes appear {
    0% {
        opacity: 0;
        transform: scale(0.7);
    }

    50% {
        transform: scale(1);
    }
}